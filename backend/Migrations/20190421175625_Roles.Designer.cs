// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToughBattle.Database;

namespace ToughBattle.Migrations
{
    [DbContext(typeof(FoosballContext))]
    [Migration("20190421175625_Roles")]
    partial class Roles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToughBattle.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BP1Id");

                    b.Property<int?>("BP2Id");

                    b.Property<int>("BlueTeamScore");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("GameType");

                    b.Property<int>("PlayerType");

                    b.Property<int?>("RP1Id");

                    b.Property<int?>("RP2Id");

                    b.Property<int>("RedTeamScore");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("TournamentId");

                    b.Property<int?>("TournamentMatchupId");

                    b.HasKey("Id");

                    b.HasIndex("BP1Id");

                    b.HasIndex("BP2Id");

                    b.HasIndex("RP1Id");

                    b.HasIndex("RP2Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentMatchupId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ToughBattle.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameId");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("ScorerId");

                    b.Property<double>("Velocity");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ScorerId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("ToughBattle.Models.GroupPlacePair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Group");

                    b.Property<int>("Place");

                    b.HasKey("Id");

                    b.ToTable("GroupPlacePair");
                });

            modelBuilder.Entity("ToughBattle.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdvanceToUpper");

                    b.Property<bool>("Finished");

                    b.Property<int?>("LowerPairId");

                    b.Property<bool>("Merged");

                    b.Property<int?>("NextMatchupId");

                    b.Property<int?>("T1P1Id");

                    b.Property<int?>("T1P2Id");

                    b.Property<int?>("T2P1Id");

                    b.Property<int?>("T2P2Id");

                    b.Property<int?>("TournamentId");

                    b.Property<int>("TournamentPhase");

                    b.Property<int?>("UpperPairId");

                    b.Property<int>("Wins1");

                    b.Property<int>("Wins2");

                    b.HasKey("Id");

                    b.HasIndex("LowerPairId");

                    b.HasIndex("NextMatchupId");

                    b.HasIndex("T1P1Id");

                    b.HasIndex("T1P2Id");

                    b.HasIndex("T2P1Id");

                    b.HasIndex("T2P2Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UpperPairId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("ToughBattle.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl");

                    b.Property<int>("Losses");

                    b.Property<string>("Name");

                    b.Property<int>("Wins");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ToughBattle.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupCount");

                    b.Property<bool>("HasEnded");

                    b.Property<string>("Name");

                    b.Property<int>("PlayoffMatchupsCount");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StartingPhase");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("ToughBattle.Models.TournamentPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<int>("Losses");

                    b.Property<int?>("PlayerId");

                    b.Property<int?>("TournamentId");

                    b.Property<int>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentPlayers");
                });

            modelBuilder.Entity("ToughBattle.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("GoogleId");

                    b.Property<int?>("PlayerId");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToughBattle.Models.Game", b =>
                {
                    b.HasOne("ToughBattle.Models.Player", "BP1")
                        .WithMany()
                        .HasForeignKey("BP1Id");

                    b.HasOne("ToughBattle.Models.Player", "BP2")
                        .WithMany()
                        .HasForeignKey("BP2Id");

                    b.HasOne("ToughBattle.Models.Player", "RP1")
                        .WithMany()
                        .HasForeignKey("RP1Id");

                    b.HasOne("ToughBattle.Models.Player", "RP2")
                        .WithMany()
                        .HasForeignKey("RP2Id");

                    b.HasOne("ToughBattle.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId");

                    b.HasOne("ToughBattle.Models.Matchup", "TournamentMatchup")
                        .WithMany()
                        .HasForeignKey("TournamentMatchupId");
                });

            modelBuilder.Entity("ToughBattle.Models.Goal", b =>
                {
                    b.HasOne("ToughBattle.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("ToughBattle.Models.Player", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("ToughBattle.Models.Player", "Scorer")
                        .WithMany()
                        .HasForeignKey("ScorerId");
                });

            modelBuilder.Entity("ToughBattle.Models.Matchup", b =>
                {
                    b.HasOne("ToughBattle.Models.GroupPlacePair", "LowerPair")
                        .WithMany()
                        .HasForeignKey("LowerPairId");

                    b.HasOne("ToughBattle.Models.Matchup", "NextMatchup")
                        .WithMany()
                        .HasForeignKey("NextMatchupId");

                    b.HasOne("ToughBattle.Models.TournamentPlayer", "T1P1")
                        .WithMany()
                        .HasForeignKey("T1P1Id");

                    b.HasOne("ToughBattle.Models.TournamentPlayer", "T1P2")
                        .WithMany()
                        .HasForeignKey("T1P2Id");

                    b.HasOne("ToughBattle.Models.TournamentPlayer", "T2P1")
                        .WithMany()
                        .HasForeignKey("T2P1Id");

                    b.HasOne("ToughBattle.Models.TournamentPlayer", "T2P2")
                        .WithMany()
                        .HasForeignKey("T2P2Id");

                    b.HasOne("ToughBattle.Models.Tournament", "Tournament")
                        .WithMany("PlayoffTree")
                        .HasForeignKey("TournamentId");

                    b.HasOne("ToughBattle.Models.GroupPlacePair", "UpperPair")
                        .WithMany()
                        .HasForeignKey("UpperPairId");
                });

            modelBuilder.Entity("ToughBattle.Models.TournamentPlayer", b =>
                {
                    b.HasOne("ToughBattle.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("ToughBattle.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("ToughBattle.Models.User", b =>
                {
                    b.HasOne("ToughBattle.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
